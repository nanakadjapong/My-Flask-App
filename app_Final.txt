import os
from flask import Flask, request, send_from_directory, redirect, url_for
from werkzeug.utils import secure_filename
import pandas as pd
from datetime import timedelta
import re
import openpyxl
from openpyxl.styles import PatternFill, Border, Side
from openpyxl.styles import Alignment

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
# from wordcloud import WordCloud
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer
from datetime import datetime, timedelta
import os
from flask import Flask, request, send_from_directory, redirect, url_for, session
from werkzeug.utils import secure_filename
import pandas as pd
import os
from flask import Flask, request, send_from_directory, redirect, url_for, render_template, session
from werkzeug.utils import secure_filename
import pandas as pd
from flask import Flask, flash  # Import the flash function
import os
from flask import Flask, request, send_from_directory, redirect, url_for, flash, session, render_template  # Added 'flash'
from werkzeug.utils import secure_filename
from flask import Flask, render_template, request, redirect, url_for, flash
# from flask_mail import Mail, Message
from sklearn.linear_model import LinearRegression
from werkzeug.utils import secure_filename
import matplotlib.pyplot as plt
import base64
from flask import Flask, request, render_template_string, flash
import pandas as pd
import os
from werkzeug.utils import secure_filename
from io import BytesIO
from sklearn.metrics import mean_squared_error
from math import sqrt



UPLOAD_FOLDER = r"/home/nanaadjapong/uploads"  #
ALLOWED_EXTENSIONS = {'xlsx', 'xls', 'csv'}

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER



# zz333Gen  a random secret key
secret_key = os.urandom(24)
print(secret_key)


app.secret_key = secret_key




#stach my files to view in this listeee
processed_files = []


os.makedirs(UPLOAD_FOLDER, exist_ok=True)


def process_and_save_files(filepath, username):
    user_directory = os.path.join(app.config['UPLOAD_FOLDER'], username)

    os.makedirs(user_directory, exist_ok=True)  #


    # processed_files = []


    base_path = app.config['UPLOAD_FOLDER']

    base_path = user_directory


    df = pd.read_csv(filepath,encoding='latin1')



    df_filtered = df[~df['Type'].str.contains('Payout')]

    final_file_name = 'Remove_type_Rows_simulated_dataframe.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    # df_filtered.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 1

    columns_to_remove = ['Fast pay fee', 'Reference', 'Arrive By Date', 'Paid Out']
    df_filtered = df_filtered.drop(columns=columns_to_remove, errors='ignore')



    final_file_name = 'final_simulated_dataframe.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    df_filtered.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 2


    # def extract_listing_info(listing):
    #     if not isinstance(listing, str):
    #             return None, None, None, None

    #     if 'Spacious 2B 2Bath Galleria Med Center Belliare' in listing:
    #         return '2', '2', '77081', '1800' ,'65'


    #     parts = listing.split('_')
    #     room_number = re.sub('[^0-9]', '', parts[-5])  # Extract only numbers
    #     bathroom_number = re.sub('[^0-9]', '', parts[-4])
    #     zip_area = parts[-3]
    #     rent_mortgage = parts[-2]
    #     cleaner_charge = parts[-1]

    #     return room_number, bathroom_number, zip_area, rent_mortgage, cleaner_charge

    #        END         ###############Function to extract information from the "Listing" column################################################



    #df[['Room Number', 'Bathroom Number', 'Zip Area', 'Rent/Mortgage', 'Cleaner Charge']] = df['Listing'].apply(extract_listing_info).apply(pd.Series)




    # df_filtered[['Room Number', 'Bathroom Number', 'Zip Area', 'Rent/Mortgage','Cleaner Charge']] = df_filtered['Listing'].apply(extract_listing_info).apply(pd.Series)

    #df_filtered[['Room Number', 'Bathroom Number', 'Zip Area']] = df_filtered['Listing'].apply(extract_listing_info).apply(pd.Series)

    #----------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    # df_filtered = df

    final_file_name = 'final_simulated_dataframe_II.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    df_filtered.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 3

    df_filtered = df_filtered.rename(columns={df_filtered.columns[0]: 'Date'})

    final_file_path = os.path.join(base_path, 'final_simulated_dataframe.csv')
    df_filtered.to_csv(final_file_path, index=False)




    df_filtered['Date'] = pd.to_datetime(df_filtered['Date'])


    df_filtered['Year'] = df_filtered['Date'].dt.year


    total_revenue_by_listing_year  = df_filtered.groupby(['Listing', 'Year'])['Amount'].sum().reset_index()


    average_nights_by_listing_year = df_filtered.groupby(['Listing', 'Year'])['Nights'].mean().reset_index()


    total_booked_nights_by_listing_year = df_filtered.groupby(['Listing', 'Year'])['Nights'].sum().reset_index()
    occupancy_by_listing_year           = (total_booked_nights_by_listing_year.groupby('Year')['Nights'].transform('sum') / total_booked_nights_by_listing_year['Nights']) * 100
    occupancy_by_listing_year           = pd.DataFrame({'Listing': total_booked_nights_by_listing_year['Listing'], 'Year': total_booked_nights_by_listing_year['Year'], 'Occupancy Rate': occupancy_by_listing_year})


    most_popular_listing_by_year = df_filtered.groupby('Year')['Listing'].apply(lambda x: x.value_counts().idxmax()).reset_index()
    most_popular_listing_by_year.columns = ['Year', 'Most Popular Listing']


    df_filtered['ADR'] = df_filtered['Amount'] / df_filtered['Nights']
    average_adr_by_listing_year = df_filtered.groupby(['Listing', 'Year'])['ADR'].mean().reset_index()


    summary_df_by_listing_year = pd.merge(total_revenue_by_listing_year, average_nights_by_listing_year, on=['Listing', 'Year'])
    summary_df_by_listing_year = pd.merge(summary_df_by_listing_year, occupancy_by_listing_year, on=['Listing', 'Year'])
    summary_df_by_listing_year = pd.merge(summary_df_by_listing_year, most_popular_listing_by_year, on=['Year'])
    summary_df_by_listing_year = pd.merge(summary_df_by_listing_year, average_adr_by_listing_year, on=['Listing', 'Year'])



    final_file_name = 'report_simulated_dataframe_by_listing_year.csv'
    final_file_path = os.path.join(base_path, final_file_name)

    # summary_df_by_listing_year.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 4



    ######## #### TEST #### ########



    # df_filtered['Cleaner Charge'] = pd.to_numeric(df_filtered['Cleaner Charge'], errors='coerce')



    df_filtered['Date'] = pd.to_datetime(df_filtered['Date'], infer_datetime_format=True)



    df_filtered['YearMonth'] = df_filtered['Date'].dt.to_period('M')



    df_filtered['Unique Guests'] = df_filtered.groupby(['Listing', 'YearMonth'])['Guest'].transform('nunique')


    # df_filtered['Total Cleaner Charge'] = df_filtered['Unique Guests'] * df_filtered['Cleaner Charge']



    final_file_name = 'Cleaner_Report_simulated_dataframe_by_listing_year.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    # df_filtered.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 5



    df_filtered_sorted = df_filtered.sort_values(by=['Date'], ascending=False)



    final_file_path = os.path.join(base_path, 'Cleaner_Sum_Sorted_Listing_simulated_dataframe_by_listing_year.csv')
    df_filtered_sorted.to_csv(final_file_path, index=False)


    df_filtered_sorted['Total Amount Received'] = df_filtered_sorted.groupby(['Listing', 'YearMonth'])['Amount'].transform('sum').round(2)


    # df_filtered_sorted['Rent/Mortgage'] = pd.to_numeric(df_filtered_sorted['Rent/Mortgage'], errors='coerce')


    # df_filtered_sorted['Cleaner Charge'] = pd.to_numeric(df_filtered_sorted['Cleaner Charge'], errors='coerce')

    # df_filtered_sorted['Total Amount Received'] = df_filtered_sorted['Total Amount Received'].round(2)
    # final_file_path = os.path.join(base_path, 'Cleaner_Sum_Sorted_Listing_simulated_dataframe_by_listing_year.csv')
    # df_filtered_sorted.to_csv(final_file_path, index=False)
    # df_filtered_sorted['Profit/Loss Before Rent'] = df_filtered_sorted['Total Amount Received'] - df_filtered_sorted['Total Cleaner Charge']

    # df_filtered_sorted['Profit/Loss After Rent'] =   df_filtered_sorted['Profit/Loss Before Rent'] - df_filtered_sorted['Rent/Mortgage']


    df_filtered_sorted['Listing_Sort'] = df_filtered_sorted['Listing']

    final_file_name = 'Cleaner_Sum_Sorted_Listing_simulated_dataframe_by_listing_year.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    # df_filtered_sorted.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 6








    print("Summary Prrofit saved to CSV file.")

    ############ CHANGING THE RENT


    ##############################################################################


    df = df_filtered_sorted

    # df['year'] = pd.to_numeric(df['Year'], errors='coerce').fillna(0).astype(int)
    # df['rent/mortgage'] = pd.to_numeric(df['Rent/Mortgage'], errors='coerce')

    # df.sort_values(by='year', ascending=False, inplace=True)

    # years = df['year'].unique()
    # years.sort()
    # years = years[::-1]  # Reverse the sorted years for descending order
    # print(years)
    # for i in range(len(years)-1):  # Exclude the last year which is the base year (2023)
    #     year = years[i]
    #     prev_year = years[i + 1]
    #     if year < 2023:

    #         df.loc[df['year'] == year, 'rent/mortgage'] *= 0.91
    #         df.loc[df['year'] == prev_year, 'rent/mortgage'] = df[df['year'] == year]['rent/mortgage'].mean()

    # final_file_path = os.path.join(base_path, 'cleaned_Rental_year_data_II.csv')
    # # df.to_csv(final_file_path, index=False)

    # final_file_name = 'cleaned_Rental_year_data_II.csv'
    # final_file_path = os.path.join(base_path, final_file_name)
    # # df.to_csv(final_file_path, index=False)
    # # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 6



    # print("REnt adjusted  to CSV file.")


    #     df['year'] = pd.to_numeric(df['year'], errors='coerce').fillna(0).astype(int)
    #     df['rent/mortgage'] = pd.to_numeric(df['rent/mortgage'], errors='coerce')

    #     latest_year = df['year'].max()

    #     df.sort_values(by='year', ascending=True, inplace=True)

    #     years = df['year'].unique()
    #     years.sort()

    #     adjusted_rent = {}

    #     for i in range(len(years)-1):
    #         year = years[i]
    #         next_year = years[i + 1]

    #         if i == 0:
    #             adjusted_rent[year] = df[df['year'] == year]['rent/mortgage']
    #         else:

    #             adjusted_rent[year] = adjusted_rent[prev_year] * 0.91

    #         df.loc[df['year'] == year, 'adjusted_rent/mortgage'] = adjusted_rent[year]

    #         prev_year = year

    #     df['adjusted_rent/mortgage'].fillna(df['rent/mortgage'], inplace=True)

    #     df.to_csv('path_to_your_updated_file.csv', index=False)



    #     final_file_name = 'cleaned_Rental_year_data_III.csv'
    #     final_file_path = os.path.join(base_path, final_file_name)
    #     # df.to_csv(final_file_path, index=False)
    #     # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 6




    #     df.drop(columns=['Profit/Loss Before Rent', 'Profit/Loss After Rent'], errors='ignore', inplace=True)

    #     df['Profit/Loss Before Rent'] = df['Total Amount Received'] - df['Total Cleaner Charge']

    #     df['Profit/Loss After Rent'] = df['Profit/Loss Before Rent'] - df['adjusted_rent/mortgage']

    #     df['Profit/Loss Before Rent'].fillna(0, inplace=True)
    #     df['Profit/Loss After Rent'].fillna(0, inplace=True)

    #     df = df.sort_values(by='Date', ascending=False)

    #     final_file_name = 'cleaned_Rental_year_data_IV.csv'
    #     final_file_path = os.path.join(base_path, final_file_name)
    #     # df.to_csv(final_file_path, index=False)
    #     # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 7

    # ################### THIS IS TO SHOW CLIENTS THE LAST 6 MONTHS OF DATA #################

    #     # df['Date'] = pd.to_datetime(df['Date'])

    #     # max_date = df['Date'].max()
    #     # six_months_ago = max_date - pd.DateOffset(months=14)

    #     # df = df[df['Date'] >= six_months_ago]


    #     ###################   END           THIS IS TO SHOW CLIENTS THE LAST 6 MONTHS OF DATA         END     #################


    #     #cleaned_file_path = r"C:\Users\Kobe\Downloads\cleaned_Rental_year_data_IV.csv" # Replace with your desired new CSV file path
    #     final_file_name = 'Cleaned_9_Month_Data_IV.csv'
    #     final_file_path = os.path.join(base_path, final_file_name)
    #     # df.to_csv(final_file_path, index=False)
    #     # processed_files.append(final_file_name)#------------------------------------------------------------------------------> 8



    #     ##################### We are trying to separte the transactions by monthly ###########################

    #     # df['Date'] = pd.to_datetime(df['Date'])

    #     # df = df.sort_values(by='Date')

    #     # new_df = pd.DataFrame()

    #     # grouped_dfs = []  # List to hold the grouped DataFrames

    #     # for _, group in df.groupby([df['Date'].dt.year, df['Date'].dt.month]):
    #     #     grouped_dfs.append(group)  # Append the group
    #     #     grouped_dfs.append(pd.DataFrame([pd.Series()]))  # Append an empty DataFrame

    #     # new_df = pd.concat(grouped_dfs, ignore_index=True)


    #     df['Date'] = pd.to_datetime(df['Date'])
    #     df = df.sort_values(by='Date')


    new_df_with_currency_label = pd.DataFrame()

    for _, group in df.groupby([df['Date'].dt.year, df['Date'].dt.month]):
        monthly_total = group['Amount'].sum()

        new_df_with_currency_label = pd.concat([new_df_with_currency_label, group], ignore_index=True)

        summary_row = pd.Series({'Details': 'Sum Total', 'Amount': monthly_total})
        new_df_with_currency_label = pd.concat([new_df_with_currency_label, pd.DataFrame([summary_row])], ignore_index=True)


    # new_df_with_currency_label.to_csv(r"C:\Users\Kobe\Downloads\final_separated_look _2yrs data.csv", index=False)
    final_file_name = 'Final_Separated_look _2yrs data.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    new_df_with_currency_label.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name)#------------------------------------------------------------------------------> 9


    # filtered_df_2023 = new_df_with_currency_label[new_df_with_currency_label['Date'].dt.year == 2023]

    # filtered_df_2023 = filtered_df_2023.drop(columns=['Currency', 'ADR', 'YearMonth', 'Year'])


    new_df_with_currency_label = new_df_with_currency_label.drop(columns=['Currency', 'ADR', 'YearMonth', 'Year'])

    df= new_df_with_currency_label
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values(by='Date')


    new_df_with_currency_label = pd.DataFrame()


    for _, group in df.groupby([df['Date'].dt.year, df['Date'].dt.month]):
        monthly_total = group['Amount'].sum()

        new_df_with_currency_label = pd.concat([new_df_with_currency_label, group], ignore_index=True)

        summary_row = pd.Series({'Details': 'Sum Total', 'Amount': monthly_total})
        new_df_with_currency_label = pd.concat([new_df_with_currency_label, pd.DataFrame([summary_row])], ignore_index=True)

    print(new_df_with_currency_label.tail())


    new_df_with_currency_label = pd.DataFrame()


    df['Date'] = pd.to_datetime(df['Date'])

    for (year, month), group in df.groupby([df['Date'].dt.year, df['Date'].dt.month]):
        monthly_total = group['Amount'].sum()

        year = int(year)
        month = int(month)

        new_df_with_currency_label = pd.concat([new_df_with_currency_label, group], ignore_index=True)

        month_year = f"{month:02d}/{year}"

        summary_row = pd.Series({'Details': f'Sum Total for {month_year}', 'Amount': monthly_total})
        new_df_with_currency_label = pd.concat([new_df_with_currency_label, pd.DataFrame([summary_row])], ignore_index=True)





    # new_df_with_currency_label.to_csv(r"C:\Users\Kobe\Downloads\final_separated_look _1yrs data.csv", index=False)
    final_file_name = 'Final_All_History.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    new_df_with_currency_label.to_csv(final_file_path, index=False)
    processed_files.append(final_file_name)#------------------------------------------------------------------------------> 10

    ##################### EEEEEENNNNNNNNDDDDDDDD we are trying to separte the transactions by monthly EEEEEENNNNNNNNDDDDDDDD ###########################


    #############################   DELETING THE REPEATED LISTING SORT ######################################################






    ############################# EEEEEENNNNNNNNDDDDDDDD   DELETING THE REPEATED LISTING SORT EEEEEENNNNNNNNDDDDDDDD ######################################################





    ## CREATE A SUMARY FOR THE BEST PERFORMING lISTING
    df1 = df

    df1['Start Date'] = pd.to_datetime(df['Date'])

    df1['Month-Year'] = df['Date'].dt.strftime('%Y-%m')

    # grouped_df = df1.groupby(['Month-Year', 'Listing'])

    # monthly_profit = grouped_df.first()['Profit/Loss After Rent'].groupby('Month-Year').sum().reset_index()

    # pivot_table = pd.pivot_table(df1.drop_duplicates(subset=['Month-Year', 'Listing']),
    #                             values='Profit/Loss After Rent',
    #                             index=['Listing'],
    #                             columns=['Month-Year'],
    #                             aggfunc='first',
    #                             fill_value=0)

    # pivot_table.loc['Monthly Sum'] = pivot_table.sum()

    # pivot_table.reset_index(inplace=True)



    final_file_name = 'performing.csv'
    final_file_path = os.path.join(base_path, final_file_name)
    # pivot_table.to_csv(final_file_path, index=False)
    # processed_files.append(final_file_name) #------------------------------------------------------------------------------> 11



    df3 = df

    df3['Date'] = pd.to_datetime(df3['Date'])

    current_year = datetime.now().year

    df_filtered = df3[df3['Date'].dt.year.isin([current_year, current_year - 1])]


    # final_file_path = os.path.join(base_path, 'final look _2yrs data.csv')
    # final_file_path = os.path.join(base_path, 'final look _2yrs data.xlsx')
    # df_filtered.to_csv(final_file_path, index=False)


    print('DONE')


    # df2 = df_filtered
    # df2['Start Date'] = pd.to_datetime(df2['Start Date'])
    # df2['Year'] = df2['Start Date'].dt.year
    # df2['Month'] = df2['Start Date'].dt.month

    # df_unique = df2.drop_duplicates(subset='Confirmation Code')

    # # Group by year, month, and listing to sum the nights
    # nights_per_listing = df_unique.groupby(['Year', 'Month', 'Listing'])['Nights'].sum().reset_index()

    # pivot_table_monthly = nights_per_listing.pivot_table(index='Listing', columns=['Year', 'Month'], values='Nights', aggfunc='sum', fill_value=0)
    # pivot_table_yearly = nights_per_listing.pivot_table(index='Listing', columns='Year', values='Nights', aggfunc='sum', fill_value=0)

    # pivot_table_monthly = pivot_table_monthly.reset_index()
    # pivot_table_yearly = pivot_table_yearly.reset_index()


    # #cleaned_file_path = r"C:\Users\Kobe\Downloads\Monthly_nights booked.csv" # Replace with your desired new CSV file path
    # final_file_path = os.path.join(base_path, 'Monthly_nights booked.csv')
    # # pivot_table_monthly.to_csv(final_file_path, index=False)#------------------------------------------------------------------------------> 12

    # #cleaned_file_path = r"C:\Users\Kobe\Downloads\Yearely_nights booked.csv" # Replace with your desired new CSV file path
    # final_file_path = os.path.join(base_path, 'Yearly_nights booked.csv')
    # # pivot_table_yearly.to_csv(final_file_path, index=False)#------------------------------------------------------------------------------> 13


    # df3 = df


    # df3['Date'] = pd.to_datetime(df3['Date'])


    # current_year = datetime.now().year


    # df_filtered = df3[df3['Date'].dt.year.isin([current_year, current_year - 1])]


    # final_file_name = 'final look _2yrs data.csv'
    # final_file_path = os.path.join(base_path, final_file_name)
    # # df_filtered.to_csv(final_file_path, index=False)
    # # processed_files.append(final_file_name)#------------------------------------------------------------------------------> 13

    # print('DONE')




    # # Re-reading the CSV file into DataFrame
    # df_performing = pivot_table

    ###################################  Clean Up

    # Cleanps here removing columns
    columns_to_remove = ['Arriving by date', 'Reference code']


    new_df_with_currency_label = new_df_with_currency_label.drop(columns=[col for col in df.columns if col in columns_to_remove or any(similar in col for similar in columns_to_remove)])

    new_df_with_currency_label = new_df_with_currency_label.drop(columns=columns_to_remove, errors='ignore')




    #############################################

    # file_path = r"C:\Users\Kobe\Downloads\final look _2yrs data.xlsx"
    file_name = "Final__file.xlsx"
    final_file_path = os.path.join(base_path, file_name)


    new_df_with_currency_label.to_excel(final_file_path, index=False)


    workbook = openpyxl.load_workbook(final_file_path)
    sheet = workbook.active


    orange_border = Border(
        left=Side(style='thin', color="FFA500"),
        right=Side(style='thin', color="FFA500"),
        top=Side(style='thin', color="FFA500"),
        bottom=Side(style='thin', color="FFA500")
    )
    fill_entire_sheet = PatternFill(start_color="FFA500", end_color="FFA500", fill_type="solid")

    fill_sum_total = PatternFill(start_color="FCD299", end_color="FCD299", fill_type="solid")

    center_aligned_text = Alignment(horizontal='center', vertical='center')

    details_col_index = None
    for idx, cell in enumerate(sheet[1]):
        if cell.value == 'Details':
            details_col_index = idx + 1
            break

    if details_col_index is not None:

        for row in sheet.iter_rows(min_row=1, max_row=1):
            for cell in row:
                cell.fill = fill_entire_sheet
                cell.border = orange_border

        for row in sheet.iter_rows(min_row=2):
            for cell in row:
                cell.border = orange_border


        for row in sheet.iter_rows(min_row=2):
    #  Complex Check if the cell value starts with 'Sum Total for'
            if row[details_col_index - 1].value and row[details_col_index - 1].value.startswith('Sum Total for'):
                for i in range(3):  # Hiteck code here : Including the 'Sum Total' cell and next two cells
                    if details_col_index - 1 + i < len(row):
                        cell = row[details_col_index - 1 + i]
                        cell.fill = fill_sum_total

        for row in sheet.iter_rows():
            for cell in row:
                cell.alignment = center_aligned_text


        workbook.save(final_file_path)

        processed_files.append(file_name)

    return processed_files





def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def home():
    return render_template('landing.html')


@app.route('/landing')
def landing():
    return render_template('landing.html')


@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        username = request.form['username']
        user_directory = os.path.join(app.config['UPLOAD_FOLDER'], username)
        if os.path.exists(user_directory):

            flash('Hey Fool, seems Username already exists. Please choose another.', 'error')
            return redirect(url_for('home'))

    if request.method == 'POST':
        username = request.form['username']
        if 'file' not in request.files:
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            user_directory = os.path.join(app.config['UPLOAD_FOLDER'], username)
            os.makedirs(user_directory, exist_ok=True)
            filepath = os.path.join(user_directory, filename)
            file.save(filepath)
            processed_files = process_and_save_files(filepath, username)
            session['processed_files'] = processed_files
            return redirect(url_for('download_page', username=username))

    return render_template('upload.html')


@app.route('/downloads')
def download_page():
    username = request.args.get('username')  # some genius shit here!!
    processed_files = session.get('processed_files', [])
    return render_template('downloads.html', files=processed_files, username=username)




@app.route('/download/<username>/<filename>')
def download_file(username, filename):
    user_directory = os.path.join(app.config['UPLOAD_FOLDER'], username)
    return send_from_directory(user_directory, filename)

@app.route('/future-developments')
def future_developments():
    return render_template('future_developments.html')

############# New Code: to process different users #############################

@app.route('/view_file/<username>')
def view_file(username):

    csv_file_path = f"/home/nanaadjapong/uploads/{username}/Final_All_History.csv"
    excel_file_path = f"/home/nanaadjapong/uploads/{username}/Final__file.xlsx"


    if os.path.exists(csv_file_path) and os.path.isfile(csv_file_path):
        try:

            df = pd.read_csv(csv_file_path)

            return render_template('view_file.html', table=df.to_html(classes='table table-striped table-hover'))
        except Exception as e:
            return f"Bud !! Error processing your CSV file: {e}", 500


    elif os.path.exists(excel_file_path) and os.path.isfile(excel_file_path):
        try:

            df = pd.read_excel(excel_file_path)

            return render_template('view_file.html', table=df.to_html(classes='table table-striped table-hover'))
        except Exception as e:
            return f"Hey!! Error processing the Excel file: {e}", 500

    else:
        return "File not found", 404


def create_plot(X, y, model, x_label, y_label):
    plt.figure()
    plt.scatter(X, y, color='red')
    plt.plot(X, model.predict(X), color='blue')
    plt.title(f'{y_label} vs. {x_label}')
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    buffer = BytesIO()
    plt.savefig(buffer, format='png', bbox_inches='tight')
    plt.close()
    buffer.seek(0)
    image_png = buffer.getvalue()
    graph = base64.b64encode(image_png)
    graph = graph.decode('utf-8')
    buffer.close()
    return graph

@app.route('/machine', methods=['GET', 'POST'])
def upload_and_process():
    plot_url = None
    error_message = None

    if request.method == 'POST':
        file = request.files.get('file')
        dependent_var_name = request.form.get('dependent_var')
        selected_algorithm = request.form.get('algorithm')
        float_number = request.form.get('float_number')


        try:
            if file and file.filename != '' and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(filepath)

                df = pd.read_csv(filepath)

                if dependent_var_name not in df.columns:
                    error_message = 'Column name not found in the dataset. Please try again.'
                    return render_template('machine.html', error_message=error_message)

                independent_vars = df.drop(columns=[dependent_var_name])
                x_column_name = independent_vars.columns[0]
                X = independent_vars.values.reshape(-1, 1)
                y = df[dependent_var_name].values

                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=0)

                if selected_algorithm == 'linear_regression':
                    regressor = LinearRegression()
                    regressor.fit(X_train, y_train)



                    y_pred = regressor.predict(X_test)


                    rmse = sqrt(mean_squared_error(y_test, y_pred))


                    plot_url = create_plot(X_train, y_train, regressor, x_column_name, dependent_var_name)

                    if float_number:
                                try:
                                    float_number = float(float_number)
                                except ValueError:
                                    flash('Please enter a valid float number.')
                                    return render_template('page.html')



                                if selected_algorithm == 'linear_regression' :

                                    prediction_result = regressor.predict([[float_number]])
                                    flash(f'Prediction result: {prediction_result[0]}')
                                else:
                                    flash('Unfortunately Buddy, Your Model not trained or selected algorithm does not match.')

                    return render_template('page.html', plot_url=plot_url, error_message=None, rmse=rmse,prediction_result=prediction_result,dependent_var_name = dependent_var_name )
            else:
                error_message = 'Hey!! No file selected or file type not allowed.'
        except Exception as e:
            error_message = f'Hey!! An error occurred: {str(e)}'

    # Just incase it fucks up lets error message to the template
    return render_template('machine.html', error_message=error_message, plot_url=plot_url)

@app.route('/WeeklyStockAllocation')
def stockToFlow():
    return render_template('xxxxx.html')


@app.route('/MLRules')
def CSV_To_Machine_Learn():
    return render_template('MachineLearningRules.html')


@app.route('/service')
def service():
    return render_template('service.html')
#@app.route('/ML_selector)
#def selectedML():
#     

@app.route('/How-to-developments')
def How_To_Rename_Listing():
    return render_template('How_To_Rename_Listing.html')

@app.route('/about')
def about():
    return render_template('about_us.html')


# @app.route('/process_files/<username>/<filename>')
# def process_files(username, filename):
#     filepath = os.path.join(app.config['UPLOAD_FOLDER'], username, filename)
#     processed_files = process_and_save_files(filepath, username)
#     return render_template('download_page.html', files=processed_files)

#############new code #############################

# @app.route('/contact', methods=['POST'])
# def contact():
#     name = request.form.get('name')
#     email = request.form.get('email')
#     message = request.form.get('message')

#
#     msg = Message(subject=f"New Contact from {name}",
#                   sender=app.config.get("MAIL_USERNAME"),
#                   recipients=["nanabot.analytics@gmail.com"],  # Replace with your email where you want to receive messages
#                   body=f"From: {name} <{email}>\n\n{message}")
#     mail.send(msg)

#     flash('Message sent! Thank you for contacting us.')

#     return redirect(url_for('upload_file'))


if __name__ == '__main__':
    app.run(debug=True)



